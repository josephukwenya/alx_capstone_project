from django.test import TestCase

# Create your tests here.
from rest_framework.reverse import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from django.contrib.auth.models import User
from .models import Applicant


class ApplicantAPITests(APITestCase):

    def setUp(self):
        # Create a test user
        self.user = User.objects.create_user(
            username="testuser",
            email="testuser@example.com",
            password="testpass123"
        )

        # Authenticate (session login, simple for now)
        self.client.login(username="testuser", password="testpass123")

        # Create an applicant linked to the user
        self.applicant = Applicant.objects.create(
            user=self.user,
            first_name="John",
            last_name="Doe",
            phone="1234567890",
            address="123 Street",
        )

    def test_applicant_list(self):
        """Should return a list of applicants"""
        url = reverse("applicant-list")  # generated by DefaultRouter
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(response.data), 1)

    def test_applicant_detail(self):
        """Should return a single applicant"""
        url = reverse("applicant-detail", args=[self.applicant.id])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["first_name"], "John")

    def test_update_applicant(self):
        """Should update applicant details"""
        url = reverse("applicant-detail", args=[self.applicant.id])
        data = {"first_name": "Jane", "last_name": "Smith"}
        response = self.client.patch(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.applicant.refresh_from_db()
        self.assertEqual(self.applicant.first_name, "Jane")

    def test_submit_applicant(self):
        """Should lock applicant and send confirmation email"""
        url = reverse("applicant-submit", args=[self.applicant.id])  # custom action
        response = self.client.post(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.applicant.refresh_from_db()
        self.assertTrue(self.applicant.is_submitted)
        self.assertTrue(self.applicant.email_sent)


class UserRegistrationTests(APITestCase):

    def test_register_user(self):
        """Should register a new user"""
        url = reverse("register")  # make sure you mapped this in urls.py
        data = {
            "username": "newuser",
            "email": "newuser@example.com",
            "password": "strongpass123"
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertTrue(User.objects.filter(username="newuser").exists())
